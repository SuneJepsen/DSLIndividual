/*
 * generated by Xtext 2.13.0
 */
package com.metagamedsl.individual.validation
import com.metagamedsl.individual.metaGameLanguage.Object
import org.eclipse.xtext.validation.Check
import com.metagamedsl.individual.metaGameLanguage.MetaGameLanguagePackage
import com.metagamedsl.individual.metaGameLanguage.Game
import com.metagamedsl.individual.metaGameLanguage.Declaration
import com.metagamedsl.individual.metaGameLanguage.Location
import com.metagamedsl.individual.metaGameLanguage.Property
import java.util.ArrayList
import java.util.List
import com.metagamedsl.individual.metaGameLanguage.BoolExp
import com.metagamedsl.individual.metaGameLanguage.NumberExp
import com.metagamedsl.individual.metaGameLanguage.Proposition
import com.metagamedsl.individual.metaGameLanguage.And
import com.metagamedsl.individual.metaGameLanguage.Or
import com.metagamedsl.individual.metaGameLanguage.Comparison
import com.metagamedsl.individual.metaGameLanguage.Expression
import com.metagamedsl.individual.metaGameLanguage.Add
import com.metagamedsl.individual.metaGameLanguage.Sub
import com.metagamedsl.individual.metaGameLanguage.Mult
import com.metagamedsl.individual.metaGameLanguage.Div
import com.metagamedsl.individual.metaGameLanguage.Parenthesis
import com.metagamedsl.individual.metaGameLanguage.LocalVariable
import com.metagamedsl.individual.metaGameLanguage.Variable
import java.util.regex.Pattern

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MetaGameLanguageValidator extends AbstractMetaGameLanguageValidator {
	
		
	/*
	 * number test = Agent1.path   
	 * 
	 * Validate on global properties
	 * "path" property should then exist on Agent1 else fail
	 */
	@Check
	def checkGameFieldObjectProperty(Game game){
		// Loop all game properties
		for(var y = 0; y < game.fields.length; y++){// Start for # 1 
			// Get property variables e.g Agent1.score, Agent2.score
			var vars = game.fields.get(y).getVariables
			// Loop through the found property variables
			for(var i = 0; i < vars.length; i++){// Start for # 2 
				if(vars.get(i) instanceof LocalVariable){
					var localVariable = vars.get(i) as LocalVariable
					// Do a look to see if the property exist on object
					for(var g = 0; g < game.getDeclarations.length; g++){// Start for # 1 
						game.getDeclarations.get(g).validateFieldProperty(localVariable)
						
					}// End for # 0 				
					System.out.println(vars.get(i));	
				}
			} // End for # 2
		}// End for # 1 
	}
	
	/*
 	* 	Object Agent1 (0,0) Agent2(1,0)   
		    truth value isAgent = true     
		  	number path = 0  
		Object Agent3 (0,0)   
		    truth value isAgent = true    
		  	number path = Agent1.score
	  	* 
	  	*Validate on locale object properties
	  	* Agent1.score , score should exist on Agent1 properties  
	 * 
	 */
	@Check
	def chekObjectProperty(Game game){
		// Loop all game properties
		for(var y = 0; y < game.declarations.length; y++){// Start for # 1 		
			if(game.declarations.get(y) instanceof Object){
				var object = (game.declarations.get(y) as Object)				
				for(var x = 0; x < object.properties.length; x++){// Start for # 2	
					var vars = object.properties.get(x).getVariables
					for(var i = 0; i < vars.length; i++){// Start for # 3 
						if(vars.get(i) instanceof LocalVariable){
							var localVariable = vars.get(i) as LocalVariable
							// Do a look to see if the property exist on object
							for(var g = 0; g < game.getDeclarations.length; g++){// Start for # 4 
								game.getDeclarations.get(g).validateFieldProperty(localVariable)								
							}// End for # 4 				
							System.out.println(vars.get(i));	
						}
					} // End for # 3			
				}
			} // End for # 2
		}// End for # 1
	}
	
	def dispatch void validateFieldProperty(Object object, LocalVariable localVariable){
		 try {
	   
			var objectName = localVariable.var_local
			var propertyName = localVariable.var_prop.name
			// Loop over all object names on object
			for(var x = 0; x < object.declarations.length; x++){// Start for # 1
				System.out.println("1")
				
				// Check if there is a match
				if(object.declarations.get(x).name == objectName){			
					var match = false
					for(var y = 0; y < object.properties.length; y++){// Start for # 2	
						if(object.properties.get(y).name == propertyName){
							match = true	
						}
					} // End for # 2
					if(!match){
						System.out.println("Validation failed on " + objectName + "." + propertyName)
						error("Object does not have property "+  propertyName,localVariable  ,MetaGameLanguagePackage.Literals.LOCAL_VARIABLE__VAR_LOCAL);
						error("Property do not exist on object "+ objectName + "." + propertyName,localVariable  ,MetaGameLanguagePackage.eINSTANCE.localVariable_Var_prop);					
					}
				}
			}// End for # 1	
	 	} 
	 	catch (IllegalArgumentException e) {
	 		System.out.println(e);
	    }
	}
	def dispatch void validateFieldProperty(Location object, LocalVariable localVariable){
			System.out.println("validateFieldProperty2")	
	}
    def List<Expression> getVariables(Property p) {
    	switch p {
    		BoolExp: p.bool_exp.getBoolVars
    		NumberExp: p.math_exp.getMathVars
    		default: throw new Error("Invalid expression")
    	}
    }
	
    def List<Expression> getBoolVars(Proposition p) {
    	var list = new ArrayList<Expression>()
    	switch p {
    		And: { 	list.addAll(p.left.getBoolVars)
	    			list.addAll(p.right.getBoolVars) }
	      	Or: { 	list.addAll(p.left.getBoolVars)
	    			list.addAll(p.right.getBoolVars) } 
	      	Comparison: { 	list.addAll(p.left.getMathVars)
	    					list.addAll(p.right.getMathVars) }
    	}
    	list
    }
        
    def List<Expression> getMathVars(Expression e) {
    	var list = new ArrayList<Expression>()
    	switch e {
    		Add: { 	list.addAll(e.left.getMathVars)
	    			list.addAll(e.right.getMathVars) }
	    	Sub: { 	list.addAll(e.left.getMathVars)
	    			list.addAll(e.right.getMathVars) }
	    	Mult: { list.addAll(e.left.getMathVars)
	    			list.addAll(e.right.getMathVars) }
	    	Div: { 	list.addAll(e.left.getMathVars)
	    			list.addAll(e.right.getMathVars) }
	    	Parenthesis: list.addAll(e.exp.getMathVars)
	        LocalVariable: list.add(e) // Ex: parameters to varProperty
	        Variable: list.add(e) //
	    }
	    list
    }
	
	/*
	 * Object Agent1 (0,0) Agent2(1,0)   
	    truth value isAgent = true  
	    truth value isAgent = true    
	  	number path = 0
	  	* 
	  	* Two properties with same name should not be allowed
	 */
	@Check 
	def checkConflictProperty(Game game){
		for(var y = 0; y < game.getDeclarations.length; y++){// Start for # 1 
			game.getDeclarations.get(y).validateProperty;
		}// End for # 0  
	}
	def dispatch void validateProperty(Object object){
		var List<String> propertyList = new ArrayList();
		for(var y = 0; y < object.properties.length; y++){// Start for # 1		 
			if( object.properties.get(y) instanceof BoolExp){
				if(propertyList.contains(object.properties.get(y).name)){
					error("Property " + ( object.properties.get(y) as BoolExp).name+ " already exist on object ", (object.properties.get(y) as BoolExp)  ,MetaGameLanguagePackage.Literals.BOOL_EXP__BOOL_EXP);
					error("Property " + ( object.properties.get(y) as BoolExp).name+ " already exist on object ", (object.properties.get(y) as BoolExp)  ,MetaGameLanguagePackage.eINSTANCE.boolExp_Bool_exp);
				}else{
					propertyList.add(object.properties.get(y).name);
				}
				System.out.println("x: BoolExp " + object.properties.get(y).name);
			}else if (object.properties.get(y) instanceof NumberExp){
				if(propertyList.contains(object.properties.get(y).name)){
					error("Property " + (object.properties.get(y) as NumberExp).name + " already exist on object ", (object.properties.get(y) as NumberExp) ,MetaGameLanguagePackage.eINSTANCE.numberExp_Math_exp);
					error("Property " + (object.properties.get(y) as NumberExp).name + " already exist on object ",(object.properties.get(y) as NumberExp) ,MetaGameLanguagePackage.Literals.NUMBER_EXP__MATH_EXP);
				
				}else{
					propertyList.add(object.properties.get(y).name);
				}				
				System.out.println("x: NumberExp "+ object.properties.get(y).name);
			}
		}	
	}
	def dispatch void validateProperty(Location location){
		var List<String> propertyList = new ArrayList();
		for(var y = 0; y < location.properties.length; y++){// Start for # 1		 
			if( location.properties.get(y) instanceof BoolExp){
				if(propertyList.contains(location.properties.get(y).name)){
					error("Property "+(location.properties.get(y) as BoolExp).name+"  already exist on location ", (location.properties.get(y) as BoolExp) ,MetaGameLanguagePackage.Literals.BOOL_EXP__BOOL_EXP);
					error("Property " + ( location.properties.get(y) as BoolExp).name+ " already exist on location ", (location.properties.get(y) as BoolExp)  ,MetaGameLanguagePackage.eINSTANCE.boolExp_Bool_exp);
				
				}else{
					propertyList.add(location.properties.get(y).name);
				}
				System.out.println("x: BoolExp " + location.properties.get(y).name);
			}else if (location.properties.get(y) instanceof NumberExp){
				if(propertyList.contains(location.properties.get(y).name)){
					error("Property " + (location.properties.get(y) as NumberExp).name + " already exist on location ", (location.properties.get(y) as NumberExp) ,MetaGameLanguagePackage.eINSTANCE.numberExp_Math_exp);
					error("Property " + (location.properties.get(y) as NumberExp).name + " already exist on location ",(location.properties.get(y) as NumberExp) ,MetaGameLanguagePackage.Literals.NUMBER_EXP__MATH_EXP);
		
				
				}else{
					propertyList.add(location.properties.get(y).name);
				}				
				System.out.println("x: NumberExp "+ location.properties.get(y).name);
			}
		}
	}
	
	
	/*
	 * E.g.: Object Agent1 (0,0) Agent1(1,0)   
			    truth value isAgent = true    
			  	number path = 0
  	* 
  	* 	Object names should be unique
  	* 
	*/
	@Check 
	def checkConflictObjectNames(Game game){
		var List<String> seenObjectList = new ArrayList();
		for(var y = 0; y < game.getDeclarations.length; y++){// Start for # 1 
			if (game.getDeclarations.get(y) instanceof Object){
				var object = (game.getDeclarations.get(y) as Object)
				for(var o = 0; o < object.declarations.length; o++){// Start for # 2 
					var objectDeclaration = object.declarations.get(o)
					if (seenObjectList.contains(objectDeclaration.name)){
						error("Object name is a duplicate " + objectDeclaration.name, objectDeclaration ,MetaGameLanguagePackage.eINSTANCE.objectDeclaration_Coordinates);
						error("Object " + objectDeclaration.name+ " is a duplicate ", objectDeclaration ,MetaGameLanguagePackage.Literals.OBJECT_DECLARATION__NAME);
					}
					else{
						seenObjectList.add(objectDeclaration.name)
					}
				} // End for # 2
			}
		}// End for # 1  
	}
	
	
	
	
	//@Check
	def checkConflictProperty(Property property){
		var List<String> objectList = new ArrayList();
		var List<String> propertyList = new ArrayList();
		var List<String> errorList = new ArrayList();
		
		
		System.out.println();
		System.out.println();
		System.out.println();
		System.out.println("Start");
			
		System.out.println(property.eContainer.eClass.instanceClass);
		System.out.println(property);
		
		// Check if the current property parent is an object
		if(property.eContainer.eClass.instanceClass.equals(com.metagamedsl.individual.metaGameLanguage.Object)){
			var currentObject = property.eContainer as Object;
			System.out.println("Innerloop start");
			for(var i = 0; i <currentObject.getDeclarations.length; i++){				
				// Save the property's object name into a list
				//System.out.println("Reference object name: " + currentObject.getDeclarations.get(i).name);
				objectList.add(currentObject.getDeclarations.get(i).name);				
			}
			System.out.println("Innerloop end");	
			
			// Loop through all actual objects which properties need to be validated
			for(var y = 0; y < objectList.length; y++){ // start for # 0
				// Loop through properties of the property's scope	
				for(var i = 0; i < property.eContainer.eContents.length; i++){ // start for # 1						
						
						if (property.eContainer.eContents.get(i) instanceof BoolExp || property.eContainer.eContents.get(i) instanceof NumberExp){
							
							// Check if the property parent is object
							if(property.eContainer.eContents.get(i).eContainer.eClass.instanceClass.equals(com.metagamedsl.individual.metaGameLanguage.Object)){
								var candidateObject = property.eContainer.eContents.get(i).eContainer as Object;
								
								for(var j = 0; j <candidateObject.getDeclarations.length; j++){// start for # 2										
																		
									// Check that this is the actual object property which we want to validate
									if(objectList.get(y).equals(candidateObject.getDeclarations.get(j).name)){
										
										System.out.println("We found a match: " + candidateObject.getDeclarations.get(j).name);
										
										
										// Get property "name" based on if it a number or a bool									
										var propertyName = "";
										if (property.eContainer.eContents.get(i) instanceof BoolExp){
											var propertyType = property.eContainer.eContents.get(i) as BoolExp;
											propertyName = propertyType.name;
										} 
										else if (property.eContainer.eContents.get(i) instanceof NumberExp){
											var propertyType = property.eContainer.eContents.get(i) as NumberExp;
											propertyName = propertyType.name;
										} 
										
										System.out.println("Property of interest name: "+ propertyName);
										
										// Only throw error if the property exists
										if(propertyList.contains(candidateObject.getDeclarations.get(j).name+ "."+propertyName)){
											System.out.println("*********************************************************************************");
											System.out.println("Property exists : "+ candidateObject.getDeclarations.get(j).name+ "."+propertyName);
											System.out.println("*********************************************************************************");
																									
											
											if(!errorList.contains(candidateObject.getDeclarations.get(j).name+ "."+propertyName )){
												errorList.add(candidateObject.getDeclarations.get(j).name+ "."+propertyName);
												try 
												{
												   	if (property.eContainer.eContents.get(i) instanceof BoolExp){
														error("Property already exist on object '"+candidateObject.getDeclarations.get(j).name+ "."+propertyName +"'",MetaGameLanguagePackage.eINSTANCE.getBoolExp_Bool_exp);
													} 
													else if (property.eContainer.eContents.get(i) instanceof NumberExp){												   		
														error("Property already exist  on object '"+candidateObject.getDeclarations.get(j).name+ "."+propertyName +"'",property,MetaGameLanguagePackage.eINSTANCE.getNumberExp_Math_exp);
													    //error("Property already exist  on object '"+candidateObject.getDeclarations.get(j).name+ "."+propertyName +"'",property,MetaGameLanguagePackage.Literals.NUMBER_EXP__MATH_EXP);
													  
													}
											  	} 
											  	catch (IllegalArgumentException e) {
												   //throw new IllegalArgumentException(e);
											  	}											  	
											}
																		
										}else{
											propertyList.add(candidateObject.getDeclarations.get(j).name+ "."+propertyName);
											System.out.println("Property added: "+ candidateObject.getDeclarations.get(j).name+ "."+propertyName);
										}
										
									} // end if			
								} // end for # 2
							} // end if
						} 
					} // end if
					
				} // end for # 1
			} // end for # 0
			

		System.out.println("End");
		System.out.println();
		System.out.println();
		System.out.println();
		
	}
	
	@Check
	def checkLegalAgentPosition(Object object){
		
		for(var i = 0; i < object.getDeclarations.length; i++){
			var x = object.getDeclarations.get(i).coordinates.x;
			var y = object.getDeclarations.get(i).coordinates.y;
			
			//System.out.println("****************************************************");
			//System.out.println("Object name: " + object.getDeclarations.get(i).name);
			//System.out.println("x: " + x);
			//System.out.println("y: " + y);
			//System.out.println("****************************************************");
			
			if(x > 4 ||y>4){
				error("Coordinates is out of scope '"+object.getDeclarations.get(i).name +"'",MetaGameLanguagePackage.eINSTANCE.object_Declarations);
			}
		}
	}
	
}
